<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2015  Sheila Ellen Thomson

This program is free software: you can redistribute it and/or modify
it under the terms of the MIT License (MIT) as published by
the Open Source Initiative.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
MIT License for more details.

You should have received a copy of the MIT License
along with this program.  If not, see <http://opensource.org/licenses/MIT>
-->
<x:description 
	xmlns:sch="http://ns.kaikoda.com/xspec/schematron/functions"
	xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
	xmlns:x="http://www.jenitennison.com/xslt/xspec"	
	stylesheet="../../../src/functions.xsl">
		
	<x:scenario label="constraint-passes()">

		<x:scenario label="True">
			
			<x:scenario label="No constraints.">
				
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output />
					</x:param>
					<x:param select="'surface-missing'" />
				</x:call>
				
				<x:expect label="No failed-assert with '[ID: surface-missing]' appended to the end of the message  is detected." select="true()" />
				
			</x:scenario>
			
			<x:scenario label="One constraint present.">
				
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output>
							<svrl:failed-assert test="self::*/@id"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Colour ID.  Every colour must have an ID. [ID: id-missing]</svrl:text>
							</svrl:failed-assert>
						</svrl:schematron-output>
					</x:param>
					<x:param select="'surface-missing'" />
				</x:call>
				
				<x:expect label="No failed-assert with '[ID: surface-missing]' appended to the end of the message  is detected." select="true()" />
				
			</x:scenario>
			
			<x:scenario label="Two patterns present.">
				
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output>
							<svrl:failed-assert test="self::*/@id"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Colour ID.  Every colour must have an ID. [ID: id-missing]</svrl:text>
							</svrl:failed-assert>
							<svrl:failed-assert test="self::*[@surface = preceding::colour/@surface]"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Duplicate surface.  A colour has already been specified for this surface. [ID: surface-duplicate]</svrl:text>
							</svrl:failed-assert>
						</svrl:schematron-output>
					</x:param>
					<x:param select="'surface-missing'" />
				</x:call>
				
				<x:expect label="No failed-assert with '[ID: surface-missing]' appended to the end of the message  is detected." select="true()" />
				
			</x:scenario>
			
		</x:scenario>
		
		<x:scenario label="False">
			
			<x:scenario label="Only constraint present.">
						
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output>
							<svrl:failed-assert test="self::*/@id"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Colour ID.  Every colour must have an ID. [ID: id-missing]</svrl:text>
							</svrl:failed-assert>
						</svrl:schematron-output>
					</x:param>
					<x:param select="'id-missing'" />
				</x:call>
				
				<x:expect label="A failed-assert with '[ID: id-missing]' appended to the end of the message is detected." select="false()" />
															
			</x:scenario>
			
			<x:scenario label="First constraint present.">
						
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output>
							<svrl:failed-assert test="self::*/@id"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Colour ID.  Every colour must have an ID. [ID: id-missing]</svrl:text>
							</svrl:failed-assert>
							<svrl:failed-assert test="self::*/@surface"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Surface.  At least one surface must be specified for each colour. [ID: surface-missing]</svrl:text>
							</svrl:failed-assert>
						</svrl:schematron-output>
					</x:param>
					<x:param select="'id-missing'" />
				</x:call>
				
				<x:expect label="A failed-assert with '[ID: id-missing]' appended to the end of the message is detected." select="false()" />
								
			</x:scenario>
			
			<x:scenario label="Second constraint present.">
						
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output>
							<svrl:failed-assert test="self::*/@id"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Colour ID.  Every colour must have an ID. [ID: id-missing]</svrl:text>
							</svrl:failed-assert>
							<svrl:failed-assert test="self::*/@surface"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Surface.  At least one surface must be specified for each colour. [ID: surface-missing]</svrl:text>
							</svrl:failed-assert>
						</svrl:schematron-output>
					</x:param>
					<x:param select="'id-missing'" />
				</x:call>
				
				<x:expect label="A failed-assert with '[ID: id-missing]' appended to the end of the message is detected." select="false()" />
									
			</x:scenario>
			
			<x:scenario label="Last constraint present.">
						
				<x:call function="sch:constraint-passes">
					<x:param select="ancestor-or-self::document-node()">
						<svrl:schematron-output>
							<svrl:failed-assert test="self::*/@id"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Colour ID.  Every colour must have an ID. [ID: id-missing]</svrl:text>
							</svrl:failed-assert>
							<svrl:failed-assert test="self::*/@surface"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Missing Surface.  At least one surface must be specified for each colour. [ID: surface-missing]</svrl:text>
							</svrl:failed-assert>
							<svrl:failed-assert test="self::*[@surface = preceding::colour/@surface]"
								role="fatal"
								location="/scheme/colour">
								<svrl:text>Duplicate surface.  A colour has already been specified for this surface. [ID: duplicate-surface]</svrl:text>
							</svrl:failed-assert>
						</svrl:schematron-output>
					</x:param>
					<x:param select="'id-missing'" />
				</x:call>
				
				<x:expect label="A failed-assert with '[ID: surface-missing]' appended to the end of the message is detected." select="false()" />
								
			</x:scenario>
			
		</x:scenario>

	</x:scenario>
	
</x:description>
